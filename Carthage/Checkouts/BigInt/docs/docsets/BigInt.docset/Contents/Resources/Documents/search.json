{"Structs/BigInt/Words.html#/s:s10CollectionP5count13IndexDistanceQzv":{"name":"count","parent_name":"Words"},"Structs/BigInt/Words.html#/s:s22RandomAccessCollectionP7indices7IndicesQzv":{"name":"indices","parent_name":"Words"},"Structs/BigInt/Words.html#/s:s14_IndexableBaseP10startIndex0D0Qzv":{"name":"startIndex","parent_name":"Words"},"Structs/BigInt/Words.html#/s:s14_IndexableBaseP8endIndex0D0Qzv":{"name":"endIndex","parent_name":"Words"},"Structs/BigInt/Sign.html#/s:6BigIntAAV4SignO4plusA2DmF":{"name":"plus","abstract":"<p>Undocumented</p>","parent_name":"Sign"},"Structs/BigInt/Sign.html#/s:6BigIntAAV4SignO5minusA2DmF":{"name":"minus","abstract":"<p>Undocumented</p>","parent_name":"Sign"},"Structs/BigInt/Sign.html":{"name":"Sign","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4Worda":{"name":"Word","abstract":"<p>The type representing a digit in <code>BigInt</code>&lsquo;s underlying number system.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP8isSignedSbvZ":{"name":"isSigned","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV9magnitudeAA0A4UIntVv":{"name":"magnitude","abstract":"<p>The absolute value of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4signAB4SignOv":{"name":"sign","abstract":"<p>True iff the value of this integer is negative.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVA2B4SignO4sign_AA0A4UIntV9magnitudetcfc":{"name":"init(sign:magnitude:)","abstract":"<p>Initializes a new big integer with the provided absolute number and sign flag.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV6isZeroSbv":{"name":"isZero","abstract":"<p>Return true iff this integer is zero.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV6signumAByF":{"name":"signum()","abstract":"<p>Returns <code>-1</code> if this value is negative and <code>1</code> if itâ€™s positive; otherwise, <code>0</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP1topxxFZ":{"name":"~(_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1aoiA2Bz_ABtFZ":{"name":"&(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1ooiA2Bz_ABtFZ":{"name":"|(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1xoiA2Bz_ABtFZ":{"name":"^(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP2aeoiyxz_xtFZ":{"name":"&=(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP2oeoiyxz_xtFZ":{"name":"|=(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP2xeoiyxz_xtFZ":{"name":"^=(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV21isStrongProbablePrimeSbABF":{"name":"isStrongProbablePrime(_:)","abstract":"<p>Returns true iff this integer passes the <a href=\"https://en.wikipedia.org/wiki/Probable_prime\">strong probable prime test</a> for the specified base.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7isPrimeSbSi6rounds_tF":{"name":"isPrime(rounds:)","abstract":"<p>Returns true if this integer is probably prime. Returns false if this integer is definitely not prime.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP8bitWidthSiv":{"name":"bitWidth","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP20trailingZeroBitCountSiv":{"name":"trailingZeroBitCount","parent_name":"BigInt"},"Structs/BigInt/Words.html":{"name":"Words","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP5words5WordsQzv":{"name":"words","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABx5words_tcs8SequenceRzSu7ElementRtzlufc":{"name":"init(words:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV12appendHashesy7SipHash0E6HasherVz2to_tF":{"name":"appendHashes(to:)","abstract":"<p>Append this <code>BigInt</code> to the specified hasher.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerPxSgqd__7exactly_tcs0A13FloatingPointRd__lufc":{"name":"init(exactly:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerPxqd__cs0A13FloatingPointRd__lufc":{"name":"init(_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13SignedNumericP6negateyyF":{"name":"negate()","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1soiA2B_ABtFZ":{"name":"-(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2seoiyABz_ABtFZ":{"name":"-=(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> in place.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV20quotientAndRemainderAB0C0_AB9remaindertAB10dividingBy_tF":{"name":"quotientAndRemainder(dividingBy:)","abstract":"<p>Divide this integer by <code>y</code> and return the resulting quotient and remainder.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1doiA2B_ABtFZ":{"name":"/(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> and return the quotient. Traps if <code>b</code> is zero.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1roiA2B_ABtFZ":{"name":"%(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> and return the remainder. The result has the same sign as <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7modulusA2BF":{"name":"modulus(_:)","abstract":"<p>Return the result of <code>a</code> mod <code>b</code>. The result is always a nonnegative integer that is less than the absolute value of <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2deoiyABz_ABtFZ":{"name":"/=(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> storing the quotient in <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2reoiyABz_ABtFZ":{"name":"%=(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> storing the remainder in <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVAbA0A4UIntVcfc":{"name":"init(_:)","abstract":"<p>Initializes a new signed big integer with the same value as the specified unsigned big integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerPxqd__csAARd__lufc":{"name":"init(_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s7NumericPxSgqd__7exactly_tcs13BinaryIntegerRd__lufc":{"name":"init(exactly:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerPxqd__8clamping_tcsAARd__lufc":{"name":"init(clamping:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerPxqd__18truncatingIfNeeded_tcsAARd__lufc":{"name":"init(truncatingIfNeeded:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABs5Int64V14integerLiteral_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Initialize a new big integer from an integer literal.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2eeoiSbAB_ABtFZ":{"name":"==(_:_:)","abstract":"<p>Return true iff <code>a</code> is equal to <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1loiSbAB_ABtFZ":{"name":"<(_:_:)","abstract":"<p>Return true iff <code>a</code> is less than <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABSgx_Si5radixtcs14StringProtocolRzlufc":{"name":"init(_:radix:)","abstract":"<p>Initialize a big integer from an ASCII representation in a given radix. Numerals above <code>9</code> are represented by","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABs7UnicodeO6ScalarV07unicodeD7Literal_tcfc":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>Initialize a new big integer from a Unicode scalar.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABSS30extendedGraphemeClusterLiteral_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","abstract":"<p>Initialize a new big integer from an extended grapheme cluster.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABSS13stringLiteral_tcfc":{"name":"init(stringLiteral:)","abstract":"<p>Initialize a new big integer from a decimal number represented by a string literal of arbitrary length.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV11descriptionSSv":{"name":"description","abstract":"<p>Return the decimal representation of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV25customPlaygroundQuickLooks0deF0Ov":{"name":"customPlaygroundQuickLook","abstract":"<p>Return the playground quick look representation of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1moiA2B_ABtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply <code>a</code> with <code>b</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2meoiyABz_ABtFZ":{"name":"*=(_:_:)","abstract":"<p>Multiply <code>a</code> with <code>b</code> in place.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV8advancedA2B2by_tF":{"name":"advanced(by:)","abstract":"<p>Returns <code>self + n</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV8distanceA2B2to_tF":{"name":"distance(to:)","abstract":"<p>Returns <code>other - self</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3alloiA2B_ABtFZ":{"name":"&<<(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4alleoiyABz_ABtFZ":{"name":"&<<=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3aggoiA2B_ABtFZ":{"name":"&>>(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4aggeoiyABz_ABtFZ":{"name":"&>>=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP2lloixx_qd__tsAARd__lFZ":{"name":"<<(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP3lleoiyxz_qd__tsAARd__lFZ":{"name":"<<=(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP2ggoixx_qd__tsAARd__lFZ":{"name":">>(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s13BinaryIntegerP3ggeoiyxz_qd__tsAARd__lFZ":{"name":">>=(_:_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV21greatestCommonDivisorA2B4with_tF":{"name":"greatestCommonDivisor(with:)","abstract":"<p>Returns the greatest common divisor of <code>a</code> and <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7inverseABSgABF":{"name":"inverse(_:)","abstract":"<p>Returns the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\">multiplicative inverse of this integer in modulo <code>modulus</code> arithmetic</a>,","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV10squareRootAByF":{"name":"squareRoot()","abstract":"<p>Returns the integer square root of a big integer; i.e., the largest integer whose square isn&rsquo;t greater than <code>value</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:s9DecodablePxs7Decoder_p4from_tKcfc":{"name":"init(from:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:s9EncodableP6encodeys7Encoder_p2to_tKF":{"name":"encode(to:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5powerABSiF":{"name":"power(_:)","abstract":"<p>Returns this integer raised to the power <code>exponent</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5powerA2B_AB7modulustF":{"name":"power(_:modulus:)","abstract":"<p>Returns the remainder of this integer raised to the power <code>exponent</code> in modulo arithmetic under <code>modulus</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1poiA2B_ABtFZ":{"name":"+(_:_:)","abstract":"<p>Add <code>a</code> to <code>b</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2peoiyABz_ABtFZ":{"name":"+=(_:_:)","abstract":"<p>Add <code>b</code> to <code>a</code> in place.</p>","parent_name":"BigInt"},"Structs/BigUInt/Words.html#/s:s14_IndexableBaseP10startIndex0D0Qzv":{"name":"startIndex","parent_name":"Words"},"Structs/BigUInt/Words.html#/s:s14_IndexableBaseP8endIndex0D0Qzv":{"name":"endIndex","parent_name":"Words"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV4Worda":{"name":"Word","abstract":"<p>The type representing a digit in <code>BigUInt</code>&lsquo;s underlying number system.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACycfc":{"name":"init()","abstract":"<p>Initializes a new BigUInt with value 0.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACSaySuG5words_tcfc":{"name":"init(words:)","abstract":"<p>Initializes a new BigUInt with the specified digits. The digits are ordered from least to most significant.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1topA2CFZ":{"name":"~(_:)","abstract":"<p>Return the ones&rsquo; complement of <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2oeoiyACz_ACtFZ":{"name":"|=(_:_:)","abstract":"<p>Calculate the bitwise OR of <code>a</code> and <code>b</code>, and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2aeoiyACz_ACtFZ":{"name":"&=(_:_:)","abstract":"<p>Calculate the bitwise AND of <code>a</code> and <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2xeoiyACz_ACtFZ":{"name":"^=(_:_:)","abstract":"<p>Calculate the bitwise XOR of <code>a</code> and <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomIntegerACSi16withMaximumWidth_tFZ":{"name":"randomInteger(withMaximumWidth:)","abstract":"<p>Create a big integer consisting of <code>width</code> uniformly distributed random bits.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomIntegerACSi14withExactWidth_tFZ":{"name":"randomInteger(withExactWidth:)","abstract":"<p>Create a big integer consisting of <code>width-1</code> uniformly distributed random bits followed by a one bit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomIntegerA2C8lessThan_tFZ":{"name":"randomInteger(lessThan:)","abstract":"<p>Create a uniformly distributed random integer that&rsquo;s less than the specified limit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV21isStrongProbablePrimeSbACF":{"name":"isStrongProbablePrime(_:)","abstract":"<p>Returns true iff this integer passes the <a href=\"https://en.wikipedia.org/wiki/Probable_prime\">strong probable prime test</a> for the specified base.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7isPrimeSbSi6rounds_tF":{"name":"isPrime(rounds:)","abstract":"<p>Returns true if this integer is probably prime. Returns false if this integer is definitely not prime.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8bitWidthSiv":{"name":"bitWidth","abstract":"<p>The minimum number of bits required to represent this integer in binary.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV19leadingZeroBitCountSiv":{"name":"leadingZeroBitCount","abstract":"<p>The number of leading zero bits in the binary representation of this integer in base <code>2^(Word.bitWidth)</code>.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV20trailingZeroBitCountSiv":{"name":"trailingZeroBitCount","abstract":"<p>The number of trailing zero bits in the binary representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt/Words.html":{"name":"Words","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP5words5WordsQzv":{"name":"words","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACx5words_tcs8SequenceRzSu7ElementRtzlufc":{"name":"init(words:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV12appendHashesy7SipHash0F6HasherVz2to_tF":{"name":"appendHashes(to:)","abstract":"<p>Append this <code>BigUInt</code> to the specified hasher.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerPxSgqd__7exactly_tcs0A13FloatingPointRd__lufc":{"name":"init(exactly:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerPxqd__cs0A13FloatingPointRd__lufc":{"name":"init(_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV25subtractReportingOverflowSbAC_Si9shiftedBytF":{"name":"subtractReportingOverflow(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer in place, and return a flag indicating if the operation caused an","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV28subtractingReportingOverflowAC12partialValue_Sb8overflowtAC_Si9shiftedBytF":{"name":"subtractingReportingOverflow(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer, returning the difference and a flag indicating arithmetic overflow.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV28subtractingReportingOverflowAC12partialValue_Sb8overflowtACF":{"name":"subtractingReportingOverflow(_:)","abstract":"<p>Subtracts <code>other</code> from <code>self</code>, returning the result and a flag indicating arithmetic overflow.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8subtractyAC_Si9shiftedBytF":{"name":"subtract(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer in place.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV11subtractingA2C_Si9shiftedBytF":{"name":"subtracting(_:shiftedBy:)","abstract":"<p>Subtract <code>b</code> from this integer, and return the difference.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV9decrementySi9shiftedBy_tF":{"name":"decrement(shiftedBy:)","abstract":"<p>Decrement this integer by one.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1soiA2C_ACtFZ":{"name":"-(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2seoiyACz_ACtFZ":{"name":"-=(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV20quotientAndRemainderAC0D0_AC9remaindertAC10dividingBy_tF":{"name":"quotientAndRemainder(dividingBy:)","abstract":"<p>Divide this integer by <code>y</code> and return the resulting quotient and remainder.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1doiA2C_ACtFZ":{"name":"/(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and return the quotient.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1roiA2C_ACtFZ":{"name":"%(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and return the remainder.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2deoiyACz_ACtFZ":{"name":"/=(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and store the quotient in <code>x</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2reoiyACz_ACtFZ":{"name":"%=(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and store the remainder in <code>x</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s7NumericPxSgqd__7exactly_tcs13BinaryIntegerRd__lufc":{"name":"init(exactly:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerPxqd__csAARd__lufc":{"name":"init(_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerPxqd__18truncatingIfNeeded_tcsAARd__lufc":{"name":"init(truncatingIfNeeded:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerPxqd__8clamping_tcsAARd__lufc":{"name":"init(clamping:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACs6UInt64V14integerLiteral_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Initialize a new big integer from an integer literal.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP8isSignedSbvZ":{"name":"isSigned","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV6signumACyF":{"name":"signum()","abstract":"<p>Returns <code>-1</code> if this value is negative and <code>1</code> if itâ€™s positive; otherwise, <code>0</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV9subscriptSuSici":{"name":"subscript(_:)","abstract":"<p>Get or set a digit at a given index.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7compareSC16ComparisonResultOAC_ACtFZ":{"name":"compare(_:_:)","abstract":"<p>Compare <code>a</code> to <code>b</code> and return an <code>NSComparisonResult</code> indicating their order.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Return true iff <code>a</code> is equal to <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1loiSbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Return true iff <code>a</code> is less than <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACSgSS_Si5radixtcfc":{"name":"init(_:radix:)","abstract":"<p>Initialize a big integer from an ASCII representation in a given radix. Numerals above <code>9</code> are represented by","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACSgs9SubstringV_Si5radixtcfc":{"name":"init(_:radix:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACs7UnicodeO6ScalarV07unicodeE7Literal_tcfc":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>Initialize a new big integer from a Unicode scalar.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACSS30extendedGraphemeClusterLiteral_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","abstract":"<p>Initialize a new big integer from an extended grapheme cluster.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACSS13stringLiteral_tcfc":{"name":"init(stringLiteral:)","abstract":"<p>Initialize a new big integer from a decimal number represented by a string literal of arbitrary length.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV11descriptionSSv":{"name":"description","abstract":"<p>Return the decimal representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV25customPlaygroundQuickLooks0efG0Ov":{"name":"customPlaygroundQuickLook","abstract":"<p>Return the playground quick look representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACs22UnsafeRawBufferPointerVcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVAC10Foundation4DataVcfc":{"name":"init(_:)","abstract":"<p>Initializes an integer from the bits stored inside a piece of <code>Data</code>.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV9serialize10Foundation4DataVyF":{"name":"serialize()","abstract":"<p>Return a <code>Data</code> value that contains the base-256 representation of this integer, in network (big-endian) byte order.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8multiplyySu6byWord_tF":{"name":"multiply(byWord:)","abstract":"<p>Multiply this big integer by a single word, and store the result in place of the original big integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10multipliedACSu6byWord_tF":{"name":"multiplied(byWord:)","abstract":"<p>Multiply this big integer by a single Word, and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV14multiplyAndAddyAC_SuSi9shiftedBytF":{"name":"multiplyAndAdd(_:_:shiftedBy:)","abstract":"<p>Multiply <code>x</code> by <code>y</code>, and add the result to this integer, optionally shifted <code>shift</code> words to the left.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10multipliedA2C2by_tF":{"name":"multiplied(by:)","abstract":"<p>Multiply this integer by <code>y</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV25directMultiplicationLimitSivZ":{"name":"directMultiplicationLimit","abstract":"<p>Multiplication switches to an asymptotically better recursive algorithm when arguments have more words than this limit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1moiA2C_ACtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply <code>a</code> by <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2meoiyACz_ACtFZ":{"name":"*=(_:_:)","abstract":"<p>Multiply <code>a</code> by <code>b</code> and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV6Stridea":{"name":"Stride","abstract":"<p>A type that can represent the distance between two values ofa <code>BigUInt</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8advancedAc2AV2by_tF":{"name":"advanced(by:)","abstract":"<p>Adds <code>n</code> to <code>self</code> and returns the result. Traps if the result would be less than zero.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8distanceA2AVAC2to_tF":{"name":"distance(to:)","abstract":"<p>Returns the (potentially negative) difference between <code>self</code> and <code>other</code> as a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BigInt.html\">BigInt</a></code>. Never traps.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP3ggeoiyxz_qd__tsAARd__lFZ":{"name":">>=(_:_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP3lleoiyxz_qd__tsAARd__lFZ":{"name":"<<=(_:_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP2ggoixx_qd__tsAARd__lFZ":{"name":">>(_:_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s13BinaryIntegerP2lloixx_qd__tsAARd__lFZ":{"name":"<<(_:_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV21greatestCommonDivisorA2C4with_tF":{"name":"greatestCommonDivisor(with:)","abstract":"<p>Returns the greatest common divisor of <code>self</code> and <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7inverseACSgACF":{"name":"inverse(_:)","abstract":"<p>Returns the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\">multiplicative inverse of this integer in modulo <code>modulus</code> arithmetic</a>,","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10squareRootACyF":{"name":"squareRoot()","abstract":"<p>Returns the integer square root of a big integer; i.e., the largest integer whose square isn&rsquo;t greater than <code>value</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s9DecodablePxs7Decoder_p4from_tKcfc":{"name":"init(from:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:s9EncodableP6encodeys7Encoder_p2to_tKF":{"name":"encode(to:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5powerACSiF":{"name":"power(_:)","abstract":"<p>Returns this integer raised to the power <code>exponent</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5powerA2C_AC7modulustF":{"name":"power(_:modulus:)","abstract":"<p>Returns the remainder of this integer raised to the power <code>exponent</code> in modulo arithmetic under <code>modulus</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1poiA2C_ACtFZ":{"name":"+(_:_:)","abstract":"<p>Add <code>a</code> and <code>b</code> together and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2peoiyACz_ACtFZ":{"name":"+=(_:_:)","abstract":"<p>Add <code>a</code> and <code>b</code> together, and store the sum in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html":{"name":"BigUInt","abstract":"<p>An arbitary precision unsigned integer type, also known as a <q>big integer</q>.</p>"},"Structs/BigInt.html":{"name":"BigInt","abstract":"<p>An arbitary precision signed integer type, also known as a <q>big integer</q>.</p>"},"Extensions/String.html#/s:SS6BigIntESSAA0A4UIntVcfc":{"name":"init(_:)","abstract":"<p>Initialize a new string with the base-10 representation of an unsigned big integer.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6BigIntESSAA0A4UIntV_Si5radixSb9uppercasetcfc":{"name":"init(_:radix:uppercase:)","abstract":"<p>Initialize a new string representing an unsigned big integer in the given radix (base).</p>","parent_name":"String"},"Extensions/String.html#/s:SS6BigIntESSA2AV_Si5radixSb9uppercasetcfc":{"name":"init(_:radix:uppercase:)","abstract":"<p>Initialize a new string representing a signed big integer in the given radix (base).</p>","parent_name":"String"},"Extensions/BinaryFloatingPoint.html#/s:s19BinaryFloatingPointP6BigIntsAARzs17FixedWidthInteger11RawExponentRpzsAD0I11SignificandRpzlExA2CVcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"BinaryFloatingPoint"},"Extensions/BinaryFloatingPoint.html#/s:s19BinaryFloatingPointP6BigIntsAARzs17FixedWidthInteger11RawExponentRpzsAD0I11SignificandRpzlExAC0D4UIntVcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"BinaryFloatingPoint"},"Extensions/BinaryFloatingPoint.html":{"name":"BinaryFloatingPoint"},"Extensions/String.html":{"name":"String"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}